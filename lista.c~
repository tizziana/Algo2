                         
							LISTA
ALUMNA: TIZZIANA MAZZA RETA
PADRON: 101715
CORRECTORA: ANA SECCHI



#include "lista.h"
#include <stdio.h>
#include <stdlib.h>


typedef struct nodo {
	void* dato;
	struct nodo *prox;
}nodo_t;

struct lista {
	nodo_t* primero;
	nodo_t* ultimo;
	size_t largo;
};

struct lista_iter{
	nodo_t* anterior;
	nodo_t* actual;
	lista_t* lista;
};

/* *****************************************************************
 *                    PRIMITIVAS DE LA LISTA
 * *****************************************************************/
lista_t *lista_crear(void) {
	lista_t* lista = malloc(sizeof(lista_t));
	if(!lista) return NULL;

	lista->primero = NULL;
	lista->ultimo = NULL;
	lista->largo = 0;
	return lista;
}

bool lista_esta_vacia(const lista_t *lista) {
	return lista->largo == 0;
}

bool lista_insertar_primero(lista_t *lista, void *dato) {
	nodo_t* nodo = malloc(sizeof(nodo_t));
	if (!nodo) return false;
	nodo->dato = dato;
	nodo->prox = NULL;

	if (lista_esta_vacia(lista)){
		lista->ultimo = nodo;
	}
	else{
		nodo->prox = lista->primero;
	}
	lista->primero = nodo;
	lista->largo++;

	return true;
}

bool lista_insertar_ultimo(lista_t *lista, void *dato) {
	nodo_t* nodo = malloc(sizeof(nodo_t));

	if (!nodo) return false;

	nodo->dato = dato;
	nodo->prox = NULL;

	if (lista_esta_vacia(lista)) {
		lista->primero = nodo;
	}
	else {
		lista->ultimo->prox = nodo;
	}
	lista->ultimo = nodo;
	lista->largo++;
	return true;
}
void *lista_borrar_primero(lista_t *lista) {
	if(lista_esta_vacia(lista)) return NULL;
	
	void* elemento= lista->primero->dato;
	nodo_t *nodo_aux = lista->primero;
	lista->primero = lista->primero->prox;
	free(nodo_aux);
	lista->largo--;

	return elemento; 
}
void *lista_ver_primero(const lista_t *lista) {
	if(lista_esta_vacia(lista)) return NULL;
	return lista->primero->dato;
}

void *lista_ver_ultimo(const lista_t* lista) {
	if (lista_esta_vacia(lista)) return NULL;
	return lista->ultimo->dato;
}

size_t lista_largo(const lista_t *lista){
	return lista->largo;
}

void lista_destruir(lista_t *lista, void destruir_dato(void *)) {
	while(!lista_esta_vacia(lista)) {
		void* dato = lista_borrar_primero(lista);
		if(destruir_dato) {
			destruir_dato(dato);
		}
	}
	free(lista);
}

/* ******************************************************************
 *                PRIMITIVAS DE ITERADOR EXTERNO
 * *****************************************************************/
lista_iter_t *lista_iter_crear(lista_t *lista) {
	lista_iter_t * iter = malloc(sizeof(lista_iter_t));
	if(!iter) return NULL;

	iter->anterior = NULL; 
	iter->actual = lista->primero;
	iter->lista = lista;

	return iter;
}

bool lista_iter_al_final(const lista_iter_t *iter) {
	return !iter->actual;
}

bool lista_iter_avanzar(lista_iter_t *iter) {
	if (lista_iter_al_final(iter)) return false;

	iter->anterior = iter->actual;
	iter->actual = iter->actual->prox;
	return true;
}

void *lista_iter_ver_actual(const lista_iter_t *iter) {
	if (!iter->actual) return NULL;
	return iter->actual->dato;
}

void lista_iter_destruir(lista_iter_t *iter) {
	free(iter);
}

bool lista_iter_insertar(lista_iter_t *iter, void *dato) {
	nodo_t* nodo = malloc(sizeof(nodo_t));
	if(!nodo) return false;
	nodo->dato = dato;
	nodo->prox = NULL;
	
	if (!iter->anterior) {
		nodo->prox = iter->actual;
		iter->actual = nodo;
		iter->lista->primero = iter->actual;
		if (!iter->lista->ultimo) iter->lista->ultimo = iter->actual;
	}
	else{
		iter->anterior->prox = nodo;
		nodo->prox = iter->actual;
		iter->actual = nodo;
		if (!iter->actual->prox)iter->lista->ultimo = iter->actual;
	}
	iter->lista->largo++;
	return true;
}

void *lista_iter_borrar(lista_iter_t *iter) {
	if((!iter->lista->primero && !iter->lista->ultimo) || lista_iter_al_final(iter)) return NULL;

	void *elemento;
	nodo_t* nodo_aux = iter->actual;
	elemento = iter->actual->dato;

	if (!iter->anterior) {
		iter->actual = iter->actual->prox;
		iter->lista->primero = iter->actual;
	}
	else {
		iter->anterior->prox = iter->actual->prox;
		iter->actual = iter->actual->prox;
	}

	if (nodo_aux == iter->lista->ultimo) {
			iter->lista->ultimo = iter->anterior;
	}
	free(nodo_aux);
	iter->lista->largo--;
	return elemento;
}

/* ******************************************************************
 *                PRIMITIVA DE ITERADOR INTERNO
 * *****************************************************************/	
void lista_iterar(lista_t *lista, bool (*visitar)(void *dato, void *extra), void *extra){
	nodo_t* iter_interno = lista->primero;

	bool seguir;
	while(iter_interno) {
		void* elemento = iter_interno->dato;
		seguir = visitar(elemento, extra);
		if (!seguir) return;
		iter_interno = iter_interno->prox;
	}
}
